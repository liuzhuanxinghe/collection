<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JYPCI69816H</name>
    </assembly>
    <members>
        <member name="T:JYPCI69816H.JYLogLevel">
            <summary>
            日志级别定义
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYLogLevel.DEBUG">
            <summary>
            DEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYLogLevel.INFO">
            <summary>
            INFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYLogLevel.WARN">
            <summary>
            WARN level表明会出现潜在错误的情形。
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYLogLevel.ERROR">
            <summary>
            ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYLogLevel.FATAL">
            <summary>
            FATAL level指出每个严重的错误事件将会导致应用程序的退出。
            </summary>
        </member>
        <member name="T:JYPCI69816H.JYLog">
            <summary>
            日志打印类，用于在程序逻辑中打印一些日记记录到文件，方便调试程序，
            同时客户使用时如果遇到问题，也可以使能日志打印的功能，方便定位错误的原因
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYLog.LogLevel">
            <summary>
            日志等级，默认为ERROR
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYLog._logMsgQ">
            <summary>
            用于日志消息缓存的队列，首次调用时初始化
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYLog._timerWriteLog">
            <summary>
            轮询日志队列的定时器 
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYLog.EnableLog">
            <summary>
            使能日志打印功能
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYLog.Print(System.String,System.Object[])">
            <summary>
            写入日志文件,需要定义宏ENABLELOG 或 DEBUG，此方法兼容旧版
            </summary>
            <param name="logMsg">要打印的消息内容</param>
            <param name="args">参数</param>
        </member>
        <member name="M:JYPCI69816H.JYLog.Print(JYPCI69816H.JYLogLevel,System.String,System.Object[])">
            <summary>
            写入日志文件,需要定义宏ENABLELOG 或 DEBUG
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="logMsg">要打印的消息内容</param>
            <param name="args">参数</param>
        </member>
        <member name="M:JYPCI69816H.JYLog.Flush">
            <summary>
            当前缓存中的所有日志写入文件中
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYLog.FuncWriteLog(System.Object)">
            <summary>
            轮询日志队列的定时器回调函数
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:JYPCI69816H.JYErrorCode">
            <summary>
            错误代码的定义
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.NoError">
            <summary>
            无错误
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.TimeOut">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.ErrorParam">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.IncorrectCallOrder">
            <summary>
            调用顺序不正确
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.CannotCall">
            <summary>
            当前配置不能调用该方法
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.UserBufferError">
            <summary>
            用户缓冲区错误
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.BufferOverflow">
            <summary>
            缓冲区溢出
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.BufferDownflow">
            <summary>
            缓冲区下溢出
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYErrorCode.HardwareResourceReserved">
            <summary>
            硬件资源已被占用
            </summary>
        </member>
        <member name="T:JYPCI69816H.JYDriverExceptionPublic">
            <summary>
            驱动常用错误代码枚举定义
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.UnKnown">
            <summary>
            未知异常
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.InitializeFailed">
            <summary>
            初始化失败
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.TimeOut">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.ErrorParam">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.IncorrectCallOrder">
            <summary>
            调用顺序不正确
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.CannotCall">
            <summary>
            当前配置不能调用该方法
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.UserBufferError">
            <summary>
            用户缓冲区错误
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.BufferOverflow">
            <summary>
            缓冲区溢出
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.BufferDownflow">
            <summary>
            缓冲区下溢出
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverExceptionPublic.HardwareResourceReserved">
            <summary>
            硬件资源已被占用
            </summary>
        </member>
        <member name="T:JYPCI69816H.JYDriverException">
            <summary>
            JY异常类
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYDriverException.FollowingException">
            <summary>
            异常链表指针, 指向后一个异常。
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYDriverException.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYDriverException.#ctor(JYPCI69816H.JYDriverExceptionPublic)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYDriverException.#ctor(System.String,JYPCI69816H.JYDriverExceptionPublic)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYDriverException.#ctor(JYPCI69816H.JYDriverExceptionPublic,System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="msg">异常描述信息</param>
            <param name="errorCode">内部错误代码，通常是底层驱动返回的原始错误代码，无则默认为0</param>
        </member>
        <member name="M:JYPCI69816H.JYDriverException.#ctor(System.Int32,System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">内部错误代码，通常是底层驱动返回的原始错误代码，无则默认为0</param>
            <param name="msg">异常描述信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JYPCI69816H.JYDriverException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="msg">异常描述信息</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 不为 null，则在处理内部异常的 catch 块中引发当前异常。</param>
            <param name="errorCode">内部错误代码，通常是底层驱动返回的原始错误代码，无则默认为0</param>
        </member>
        <member name="F:JYPCI69816H.JYDriverException.ErrorCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="T:JYPCI69816H.JYDriverThreadExceptionManager">
            <summary>
            线程抛出异常管理类
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverThreadExceptionManager._headException">
            <summary>
            异常链表头指针。收集非主线程产生的异常并链接成链表，在调用Stop()方法时将这些异常反馈给用户。
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYDriverThreadExceptionManager._currentException">
            <summary>
            异常链表当前节点
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYDriverThreadExceptionManager.ClearThreadExceptions">
            <summary>
            清除非主线程产生的异常
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYDriverThreadExceptionManager.ReportThreadExceptions">
            <summary>
            报告异常
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYDriverThreadExceptionManager.AppendThreadException(JYPCI69816H.JYDriverException)">
            <summary>
            将异常添加到异常变量
            </summary>
            <param name="e">异常对象</param>
            <remarks>
            若使用 
            <code> (DaqTaskException)Activator.CreateInstance(e.GetType(), e.Message, _currentException);</code>
            , 虽不必使用FollowingException属性, 但 e.InnerException 信息将丢失.
            </remarks>
        </member>
        <member name="T:JYPCI69816H.WaitEvent">
            <summary>
            等待事件类
            </summary>
        </member>
        <member name="P:JYPCI69816H.WaitEvent.Event">
            <summary>
            AutoResetEvent事件对象
            </summary>
        </member>
        <member name="P:JYPCI69816H.WaitEvent.ConditionHandler">
            <summary>
            执行此操作，返回值为true时，发出（Set）事件（Event）；否则不发出事件。
            </summary>
        </member>
        <member name="P:JYPCI69816H.WaitEvent.IsEnabled">
            <summary>
            事件是否处于被等待状态
            </summary>
        </member>
        <member name="M:JYPCI69816H.WaitEvent.#ctor(System.Func{System.Boolean})">
            <summary>
            创建等待事件对象
            </summary>
            <param name="conditionHandler">事件触发条件</param>
        </member>
        <member name="M:JYPCI69816H.WaitEvent.EnqueueWait(System.Collections.Generic.Queue{JYPCI69816H.WaitEvent},System.Int32)">
            <summary>
            <para>加入事件队列，并等待一段时间，判断事件是否触发。</para>
            <para>若检测到ConditionHandler()或者timeout为0，立即返回，不使用Event.</para>
            </summary>
            <param name="evQueue">事件队列</param>
            <param name="timeout">超时时间(单位:ms)</param>
            <returns>
            <para>true---触发条件满足</para>
            <para>false---触发条件不满足</para>
            </returns>
        </member>
        <member name="M:JYPCI69816H.WaitEvent.Wait(System.Int32)">
            <summary>
            等待一段时间，判断事件是否发出。（不加入事件队列）
            若检测到ConditionHandler()或者timeout为0，立即返回，不使用Event.
            </summary>
            <param name="timeout">超时时间(单位:ms)</param>
            <returns>
            <para>true---触发条件满足</para>
            <para>false---触发条件不满足</para>
            </returns>
        </member>
        <member name="M:JYPCI69816H.WaitEvent.Set">
            <summary>
            触发事件
            </summary>
            <returns></returns>
        </member>
        <member name="T:JYPCI69816H.CircularBuffer`1">
            <summary>
            循环缓冲队列类，旧版本，托管内存
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="P:JYPCI69816H.CircularBuffer`1.NumOfElement">
            <summary>
            当前的元素个数
            </summary>
        </member>
        <member name="P:JYPCI69816H.CircularBuffer`1.BufferSize">
            <summary>
            缓冲区的大小
            </summary>
        </member>
        <member name="P:JYPCI69816H.CircularBuffer`1.CurrentCapacity">
            <summary>
            当前能容纳的点数
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.AdjustSize(System.Int32)">
            <summary>
            调整缓冲区大小，数据会被清空
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.Clear">
            <summary>
            清空缓冲区内的数据
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.Enqueue(`0)">
            <summary>
            向缓冲队列中放入一个数据
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.Enqueue(`0[])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.Enqueue(`0[],System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.Enqueue(`0[0:,0:])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.Dequeue(`0@)">
            <summary>
            从缓冲队列中取一个数据
            </summary>
            <returns>失败：-1，1：返回一个数据</returns>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYPCI69816H.CircularBuffer`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="T:JYPCI69816H.WinAPI">
            <summary>
            windows api 的函数导入
            </summary>
        </member>
        <member name="T:JYPCI69816H.BufferQueue`1">
            <summary>
            缓冲队列类（托管内存固定）该类效率较低，不推荐使用
            </summary>
        </member>
        <member name="T:JYPCI69816H.BufferQueue`1.CDataInfo">
            <summary>
            存放数据信息的类
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueue`1.CDataInfo.Count">
            <summary>
            数据点数
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueue`1.CDataInfo.ElemType">
            <summary>
            数据元素类型
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueue`1.CDataInfo.RDIndex">
            <summary>
            读指针位置
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueue`1.CDataInfo.DataPtr">
            <summary>
            数据指针
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueue`1.CDataInfo.DataArray">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="F:JYPCI69816H.BufferQueue`1.CDataInfo._dataGCHandle">
            <summary>
            GC Handle 
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.CDataInfo.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.CDataInfo.IncIdx(System.Int32)">
            <summary>
            递增读指针
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.CDataInfo.Dispose">
            <summary>
            全部释放
            </summary>
        </member>
        <member name="F:JYPCI69816H.BufferQueue`1._dataQ">
            <summary>
            用于数据缓存的队列，首次调用时初始化
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueue`1.NumOfElement">
            <summary>
            当前的元素个数
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.Clear">
            <summary>
            清空队列内的数据
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.Enqueue(`0[])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.Enqueue(`0[],System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.Enqueue(`0[0:,0:])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYPCI69816H.BufferQueue`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="T:JYPCI69816H.BufferQueueEx`1">
            <summary>
            缓冲队列类（非托管内存）该类效率较低，不推荐使用
            </summary>
        </member>
        <member name="T:JYPCI69816H.BufferQueueEx`1.CDataInfo">
            <summary>
            存放数据信息的类
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueueEx`1.CDataInfo.Count">
            <summary>
            数据点数
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueueEx`1.CDataInfo.ElemType">
            <summary>
            数据元素类型
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueueEx`1.CDataInfo.RDIndex">
            <summary>
            读指针位置
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueueEx`1.CDataInfo.DataPtr">
            <summary>
            数据指针
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.CDataInfo.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.CDataInfo.IncIdx(System.Int32)">
            <summary>
            递增读指针
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.CDataInfo.Dispose">
            <summary>
            全部释放
            </summary>
        </member>
        <member name="F:JYPCI69816H.BufferQueueEx`1._dataQ">
            <summary>
            用于数据缓存的队列，首次调用时初始化
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:JYPCI69816H.BufferQueueEx`1.NumOfElement">
            <summary>
            当前的元素个数
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.Clear">
            <summary>
            清空队列内的数据
            </summary>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.Enqueue(`0[])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.Enqueue(`0[],System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.Enqueue(`0[0:,0:])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYPCI69816H.BufferQueueEx`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="T:JYPCI69816H.CircularBufferEx`1">
            <summary>
            循环缓冲队列扩展类（非托管内存），主要用于实现循环缓冲链，该类较高，推荐使用，但跨平台需要重新修改
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="F:JYPCI69816H.CircularBufferEx`1._sizeOfT">
            <summary>
            T的Size，创建队列的时候初始化
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferEx`1._bufferPtr">
            <summary>
            缓冲区的指针首地址
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferEx`1._WRIdx">
            <summary>
            队列写指针
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferEx`1._RDIdx">
            <summary>
            队列读指针
            </summary>
        </member>
        <member name="P:JYPCI69816H.CircularBufferEx`1.NumOfElement">
            <summary>
            当前的元素个数
            </summary>
        </member>
        <member name="P:JYPCI69816H.CircularBufferEx`1.BufferSize">
            <summary>
            缓冲区的大小
            </summary>
        </member>
        <member name="P:JYPCI69816H.CircularBufferEx`1.CurrentCapacity">
            <summary>
            当前能容纳的点数
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Dispose">
            <summary>
            释放循环缓冲区
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Clear">
            <summary>
            清空循环缓冲区的数据
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Finalize">
            <summary>
            析构函数，避免非托管内存没有释放
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Enqueue(`0[])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Enqueue(`0[],System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Enqueue(`0[],System.Int32,System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Enqueue(`0[0:,0:])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Enqueue(`0[0:,0:],System.Int32,System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Enqueue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="dataPtr">数据首地址</param>
            <param name="srcIdx">数据开始的索引（以元素为单位，非字节单位）</param>
            <param name="len">数据长度（以元素为单位，非字节单位）</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Dequeue(`0[]@,System.Int32,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Dequeue(`0[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferEx`1.Dequeue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBufferPtr">请求数据的首地址</param>
            <param name="dstIdx">目标数据的开始索引（以元素为单位，非字节单位）</param>
            <param name="len">出队数据的长度（以元素为单位，非字节单位）</param>
            <returns></returns>
        </member>
        <member name="T:JYPCI69816H.CircularBufferList`1">
            <summary>
            <para>循环缓冲链类，将CircularBufferEx链起来</para>
            <para>优点：不用预先分配较大的内存，当程序运行时不够用了再按块增加</para>
            <para>使用注意：块大小要合适，不能太小，也不能太大。</para>
            <para>----太小：增加内存拷贝的次数，消耗CPU资源；</para>
            <para>----太大：增加内存占用。</para>
            <para>推荐分配块大小为入队和出队数据量的4~16倍</para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:JYPCI69816H.CircularBufferList`1._numOfElement">
            <summary>
            元素个数计数
            </summary>
        </member>
        <member name="P:JYPCI69816H.CircularBufferList`1.NumOfElement">
            <summary>
            当前元素个数
            </summary>
        </member>
        <member name="P:JYPCI69816H.CircularBufferList`1.CurrentCapacity">
            <summary>
            当前缓冲区容量
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferList`1._blockSize">
            <summary>
            块大小
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferList`1._lstCircleBuffer">
            <summary>
            循环缓冲链表
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferList`1._RDBlockIdx">
            <summary>
            读写索引
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferList`1._WRBlockIdx">
            <summary>
            读写索引
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferList`1._LastBlockCount">
            <summary>
            上一次Dequeue后的块数
            </summary>
        </member>
        <member name="F:JYPCI69816H.CircularBufferList`1._firstDequeueFlag">
            <summary>
            第一次Dequeue后标志为false
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="blockSize"></param>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Clear">
            <summary>
            清空循环缓冲区的数据
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Dispose">
            <summary>
            释放循环缓冲区
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Finalize">
            <summary>
            析构函数，避免非托管内存没有释放
            </summary>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Enqueue(`0[])">
            <summary>
            数据入队
            </summary>
            <param name="elems">入队的数据源数组</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Enqueue(`0[],System.Int32,System.Int32)">
            <summary>
            数据入队，带数据源的开始索引
            </summary>
            <param name="elems">入队的数据源数组</param>
            <param name="srcIdx">数据源的开始索引</param>
            <param name="len">入队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Enqueue(`0[],System.Int32)">
            <summary>
            数据入队，不带数据源的开始索引
            </summary>
            <param name="elems">入队的数据源数组</param>
            <param name="len">入队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Enqueue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            数据入队，带数据源的开始索引
            </summary>
            <param name="elemsPtr">入队的数据源数组地址</param>
            <param name="srcIdx">数据源的开始索引（以元素为单位，非字节）</param>
            <param name="len">入队的数据长度（以元素为单位，非字节）</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Enqueue(`0[0:,0:],System.Int32,System.Int32)">
            <summary>
            数据入队，带数据源的开始索引
            </summary>
            <param name="elems">入队的数据源数组</param>
            <param name="srcIdx">数据源的开始索引</param>
            <param name="len">入队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Enqueue(`0[0:,0:],System.Int32)">
            <summary>
            数据入队，不带数据源的开始索引
            </summary>
            <param name="elems">入队的数据源数组</param>
            <param name="len">入队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Dequeue(`0[]@)">
            <summary>
            数据出队
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Dequeue(`0[]@,System.Int32,System.Int32)">
            <summary>
            数据出队，带目标数组的开始索引
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <param name="dstIdx">目标数组的开始索引</param>
            <param name="len">出队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            数据出队，不带目标数组的开始索引
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <param name="len">出队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Dequeue(`0[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            数据出队，带目标数组的开始索引
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <param name="dstIdx">目标数组的开始索引</param>
            <param name="len">出队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            数据出队，不带目标数组的开始索引
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <param name="len">出队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.CircularBufferList`1.Dequeue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            数据出队，带目标数组的开始索引
            </summary>
            <param name="retBufferPtr">请求出队的目标数组地址</param>
            <param name="dstIdx">目标数组的开始索引（以元素为单位，非字节）</param>
            <param name="len">出队的数据长度（以元素为单位，非字节）</param>
            <returns></returns>
        </member>
        <member name="T:JYPCI69816H.JYPCI69816HDevice">
            <summary>
            定义PXI69816专用的函数等
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.CardType">
            <summary>
            卡的类型，在实例化类对象时根据Device model初始化为对应的类型
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.BoardClkRate">
            <summary>
            板载时钟
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.ChannelCount">
            <summary>
            通道数
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.MaxSampleRate">
            <summary>
            单通道最大采样率
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.MinSampleRate">
            <summary>
            单通道最小采样率
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HDevice._cardnumber">
            <summary>
            板卡编号，构造此类对象时的入参
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HDevice._listThisInst">
            <summary>
            用于保存每个cardnumber构造出的实例
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.CardID">
            <summary>
            调用Register后得到的cardID
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.AIDBFBlockSize">
            <summary>
            AI double buffer缓冲区的blocksize
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.AINDBFBlockSize">
            <summary>
            AI non double buffer缓冲区的blocksize
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HDevice.AIReserved">
            <summary>
            AI是否已经占用的标志
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HDevice.GetInstance(System.UInt16)">
            <summary>
            根据board number获取操作实例,保证每张板卡只有一个注册实例
            </summary>
            <param name="cardNum"></param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HDevice.#ctor(System.UInt16)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HDevice.Release">
            <summary>
            关闭AD设备,禁止传输,并释放资源，该函数自动在类的析构函数中执行
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HDevice.Finalize">
            <summary>
            析构函数，释放硬件资源
            </summary>
        </member>
        <member name="F:JYPCI69816H.WDDaskProtectorRW.EERPOMConstStartAddress">
            <summary>
            EEPROM常量起始地址
            </summary>
        </member>
        <member name="F:JYPCI69816H.WDDaskProtectorRW.EEPROMConstEndAddress">
            <summary>
            EEPROM常量结束地址
            </summary>
        </member>
        <member name="F:JYPCI69816H.WDDaskProtectorRW.EEPROMSNStartAddress">
            <summary>
            EEPROM SN起始地址
            </summary>
        </member>
        <member name="F:JYPCI69816H.WDDaskProtectorRW.EEPROMSNEndAddress">
            <summary>
            EEPROM SN结束地址
            </summary>
        </member>
        <member name="F:JYPCI69816H.WDDaskProtectorRW.EEPROMConstCount">
            <summary>
            EEPROM常量的字节数
            </summary>
        </member>
        <member name="F:JYPCI69816H.WDDaskProtectorRW.EEPROMSNCount">
            <summary>
            EEPROM SN字节数
            </summary>
        </member>
        <member name="F:JYPCI69816H.WDDaskProtectorRW.EEPROMCheckStartAddress">
            <summary>
            EEPROM 写入校验数据的起始地址
            </summary>
        </member>
        <member name="F:JYPCI69816H.WDDaskProtectorRW.EEPROMCheckCount">
            <summary>
            EEPROM 写入校验数据的字节数
            </summary>
        </member>
        <member name="M:JYPCI69816H.WDDaskProtectorRW.ReadEEPROM(System.UInt16,System.Byte,System.Byte,System.Byte[]@)">
            <summary>
            读取EEPROM
            </summary>
            <param name="wCardNumber">card number</param>
            <param name="starting">起始地址</param>
            <param name="numberOfElements">读取字节数</param>
            <param name="readBytes">读取返回的字节数组</param>
            <returns>返回读取到的字节数</returns>
        </member>
        <member name="M:JYPCI69816H.WDDaskProtectorRW.WriteEEPROM(System.UInt16,System.UInt16,System.Byte,System.Byte[])">
            <summary>
            写入EEPROM
            </summary>
            <param name="wCardNumber">card number</param>
            <param name="starting">起始地址</param>
            <param name="numberOfElements">写入字节数</param>
            <param name="writeBytes">写入的字节数组</param>
        </member>
        <member name="T:JYPCI69816H.JYPCI69816HAITask">
            <summary>
            AI采集任务类,是Sealed类，不可被继承
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.#ctor(System.Int32)">
            <summary>
            构造函数,仅输入板卡编号
            </summary>
            <param name="boardNum">板卡的编号</param>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._devHandle">
            <summary>
            操作硬件的对象
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._aiStarted">
            <summary>
            AI是否已启动
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._localBuffer">
            <summary>
            本地缓冲内存
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._localPreviewBuffer">
            <summary>
            流盘预览缓冲内存
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._previewBufferLock">
            <summary>
            流盘预览缓冲区锁
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._previewDataConvertBuffer">
            <summary>
            流盘预览缓冲转换前的数组
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._recordBlockSize">
            <summary>
            流盘块大小
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._thdAcquireData">
            <summary>
            取数据的线程
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._thdWriteDataFile">
            <summary>
            取数据的线程
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._threadException">
            <summary>
            线程抛出的异常管理
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._timeBaseClockRate">
            <summary>
            基准时钟频率
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._taskDone">
            <summary>
            任务结束标志 
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._waitUntilDoneEvent">
            <summary>
            WaitUntilDone等待事件
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._samplesFetchedPerChannel">
            <summary>
            每通道已经取到的点数
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._waitLock">
            <summary>
            等待锁, 用于限制多线程并行读操作. 需要等一个线程读取完成后, 另一个线程才能读(排队).
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.EventQueue">
            <summary>
            事件队列。调用WaitUntilDone()或者ReadBuffer()时，使用事件通知方式，提高效率。
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._isOverflow">
            <summary>
            缓冲区是否溢出
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._enableAIDbfMode">
            <summary>
            AI是否使能了Double Buffer模式
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._confgiAI2Buffer">
            <summary>
            AI是否创建了2个缓冲区
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._AIDoubleBuffSize">
            <summary>
            AI硬件双缓冲区的大小
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._enableRetrigger">
            <summary>
            是否使能重触发
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._recordedLength">
            <summary>
            已经流盘的采样点数
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._recordDone">
            <summary>
            流盘是否完成
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._readbuffer0">
            <summary>
            读缓冲区0
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._bufferId0">
            <summary>
            读缓冲区id0
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._readbuffer1">
            <summary>
            读缓冲区1
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._bufferId1">
            <summary>
            读缓冲区id1
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._bufIdx">
            <summary>
            缓冲区索引
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._lastRdyIdx">
            <summary>
            用于有限次重触发，读取缓冲区数据的offset标记
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._aiConvertOk">
            <summary>
            AI Convert是否已经结束
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._enableSDRAM">
            <summary>
            是否使能板载的SDRAM缓存数据，仅Finite模式有效
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.Channels">
            <summary>
            通道列表
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.Mode">
            <summary>
            采集模式，支持Single/Finite/Continuous三种类型
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.SampleRate">
            <summary>
            每通道采样率
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.BufLenInSamples">
            <summary>
            缓冲区能容纳的每通道样点数。一次读取的样点数不能超过此容量。
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._bufferLenSet">
            <summary>
            标志BufLenInSamples是否用于已经设置
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.SamplesToAcquire">
            <summary>
            有限点采集时, 每通道采集的样点数。
            <para>默认值为256</para>
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.AvailableSamples">
            <summary>
            缓冲区内可以读取的点数
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.ClockSource">
            <summary>
            时钟源,需要根据不同厂商驱动的规定去修改EnumClkSrc枚举
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.ExternalSampleClockRate">
            <summary>
            外部输入采样时钟或的频率
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.ClockEdge">
            <summary>
            时钟沿。仅在外部时钟时有效。
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.Trigger">
            <summary>
            AI触发参数设置
            </summary>
        </member>
        <member name="P:JYPCI69816H.JYPCI69816HAITask.Record">
            <summary>
            流盘相关参数设置
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.AddChannel(System.Int32,System.Double,System.Double,JYPCI69816H.AIImpedance)">
            <summary>
            添加通道
            </summary>
            <param name="channelID">通道物理序号</param>
            <param name="rangeLow">通道量程下限</param>
            <param name="rangeHigh">通道量程上限</param>
            <param name="impedance">输入阻抗</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.AddChannel(System.Int32[],System.Double,System.Double,JYPCI69816H.AIImpedance)">
            <summary>
            添加通道
            </summary>
            <param name="channelID">要添加通道的所有物理序号</param>
            <param name="rangeLow">通道量程下限</param>
            <param name="rangeHigh">通道量程上限</param>
            <param name="impedance">输入阻抗</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.RemoveChannel(System.Int32)">
            <summary>
            删除指定通道号的通道,为-1则删除所有通道
            </summary>
            <param name="channelID">要删除的通道的通道号</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ReadData(System.Double[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="samplesPerChannel">用户缓冲区能容纳的每通道样点数</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms），-1为无限等待</param>        
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ReadData(System.Double[0:,0:]@,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms），-1为无限等待</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ReadData(System.Double[]@,System.Int32,System.Int32)">
            <summary>
            读取数据，多通道数据交错返回
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="samplesPerChannel">用户缓冲区能容纳的每通道样点数</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms），-1为无限等待</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ReadData(System.Double[]@,System.Int32)">
            <summary>
            读取数据，多通道数据交错返回
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms），-1为无限等待</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ReadRawData(System.Int16[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="samplesPerChannel">用户缓冲区能容纳的每通道样点数</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms），-1为无限等待</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ReadRawData(System.Int16[0:,0:]@,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms），-1为无限等待</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ReadRawData(System.Int16[]@,System.Int32,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="samplesPerChannel">用户缓冲区能容纳的每通道样点数</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms），-1为无限等待</param>  
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ReadRawData(System.Int16[]@,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms），-1为无限等待</param>  
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetRecordPreviewData(System.Double[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            获取流盘时预览的数据
            </summary>
            <param name="buf">用户定义返回数据的缓冲区</param>
            <param name="samplesPerChannel">每通道要取的数据</param>
            <param name="timeout">超时时间，单位ms，-1为无限等待</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetRecordPreviewData(System.Double[0:,0:]@,System.Int32)">
            <summary>
            获取流盘时预览的数据
            </summary>
            <param name="buf">用户定义返回数据的缓冲区</param>
            <param name="timeout">超时时间，单位ms，-1为无限等待</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetRecordPreviewData(System.Double[]@,System.Int32,System.Int32)">
            <summary>
            获取流盘时预览的数据
            </summary>
            <param name="buf">用户定义返回数据的缓冲区</param>
            <param name="samplesPerChannel">每通道要取的数据</param>
            <param name="timeout">超时时间，单位ms，-1为无限等待</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetRecordPreviewData(System.Double[]@,System.Int32)">
            <summary>
            获取流盘时预览的数据
            </summary>
            <param name="buf">用户定义返回数据的缓冲区</param>
            <param name="timeout">超时时间，单位ms，-1为无限等待</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetRecordStatus(System.Double@,System.Boolean@)">
            <summary>
            获取流盘状态
            </summary>
            <param name="recordedLength">已流盘的长度</param>
            <param name="recordDone">流盘是否结束</param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.WaitUntilDone(System.Int32)">
            <summary>
            等待当前任务完成
            </summary>
            <param name="timeout">等待的时间(单位:ms)，-1为无限等待</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.Start">
            <summary>
            启动数采任务
            </summary>
            <remarks> 根据配置启动任务</remarks>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.SendSoftwareTrigger">
            <summary>
            产生一个软件触发信号
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.Stop">
            <summary>
            停止数采任务
            </summary>
            <remarks>停止正在执行的任务</remarks>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ThdAcquireData">
            <summary>
            从缓冲区取数据的线程函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ThdWriteDataFile">
            <summary>
            从缓冲区取数据的线程函数
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ActivateWaitEvents">
            <summary>
            激活等待事件
            </summary>
        </member>
        <member name="F:JYPCI69816H.JYPCI69816HAITask._fs">
            <summary>
            FileStream对象
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.CreateRecordFile">
            <summary>
            创建流盘文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.WriteDataToFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            数据写入流盘文件
            </summary>
            <param name="data"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.CloseRecordFile">
            <summary>
            关闭流盘文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetVendorRange(System.Double,System.Double)">
            <summary>
            根据输入范围匹配一个原厂驱动的Range值
            </summary>
            <param name="rangeLow">输入下限</param>
            <param name="rangeHigh">输入上限</param>
            <returns>
            小于0：错误
            大于0：实际的Range
            </returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ScaleRawData(System.Int16[0:,0:],System.Double[],System.Int32,System.UInt16[])">
            <summary>
            对原始数据RawData进行Scale转换
            </summary>
            <param name="rawData">原始数据</param>
            <param name="scaledData">Scale后的数据</param>
            <param name="samples">采集到点数</param>
            <param name="scaleRange">需要scale的range</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ScaleRawData(System.Int16[0:,0:],System.Double[0:,0:],System.Int32,System.UInt16[])">
            <summary>
            对原始数据RawData进行Scale转换
            </summary>
            <param name="rawData">原始数据</param>
            <param name="scaledData">Scale后的数据</param>
            <param name="samples">采集到的点数</param>
            <param name="scaleRange">需要scale的range</param>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetRangeArray">
            <summary>
            获取当前添加通道的数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetChannelArray">
            <summary>
            获取当前添加通道的数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetNearest2N(System.UInt32)">
            <summary>
            取大于输入整数a的2的N方的数
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.FetchBuffer(System.IntPtr@,System.Int32@,System.Boolean@)">
            <summary>
            从本地缓冲区中取采集的数据
            </summary>
            <param name="bufferPtr"></param>
            <param name="startIdx"></param>
            <param name="stopped"></param>
            <returns>
            小于0：失败，具体看错误代码
            大于0：成功，值代表每通道返回的样点数
            </returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.AIConfig">
            <summary>
            AI相关的配置，调用原厂Config函数进行配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ClockCheck">
            <summary>
            采样时钟Check，用于Start时对内/外采样时钟的情况下，检查采样率设置
            </summary>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.ConfigContAcq">
            <summary>
            连续采集配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYPCI69816H.JYPCI69816HAITask.GetNearestOfMBlocksize(System.UInt32,System.UInt32)">
            <summary>
            获取里requestsize最近的Blocksize的整数倍的数
            </summary>
            <param name="requestSize"></param>
            <param name="blockSize"></param>
            <returns></returns>
        </member>
        <member name="T:JYPCI69816H.AIChannel">
            <summary>
            AI通道参数类
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIChannel.ChannelID">
            <summary>
            通道号。与AI通道的物理序号相对应。
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIChannel.RangeLow">
            <summary>
            通道量程下限
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIChannel.RangeHigh">
            <summary>
            通道量程上限
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIChannel.Impedance">
            <summary>
            AI输入阻抗
            </summary>
        </member>
        <member name="M:JYPCI69816H.AIChannel.#ctor(System.Int32,System.Double,System.Double,JYPCI69816H.AIImpedance)">
            <summary>
            构造函数，创建AIChnParam对象
            </summary>
            <param name="channelID">通道物理序号</param>
            <param name="rangeLow">通道量程下限</param>
            <param name="rangeHigh">通道量程上限</param>
            <param name="impedance">输入阻抗</param>
        </member>
        <member name="T:JYPCI69816H.AIImpedance">
            <summary>
            输入阻抗定义
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIImpedance.Impedance50Ohm">
            <summary>
            50Ohm
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIImpedance.ImpedanceHigh">
            <summary>
            1MOhm High Impedance
            </summary>
        </member>
        <member name="T:JYPCI69816H.AITriggerType">
            <summary>
            AI触发类型，需要根据板卡的实际支持情况修改
            </summary>
        </member>
        <member name="F:JYPCI69816H.AITriggerType.Immediate">
            <summary>
            无触发
            </summary>
        </member>
        <member name="F:JYPCI69816H.AITriggerType.Software">
            <summary>
            软件触发
            </summary>
        </member>
        <member name="F:JYPCI69816H.AITriggerType.Digital">
            <summary>
            数字触发
            </summary>
        </member>
        <member name="F:JYPCI69816H.AITriggerType.Analog">
            <summary>
            模拟触发
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIClockEdge">
            <summary>
            AI时钟沿类型
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIClockEdge.Rising">
            <summary>
            上升沿
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIClockEdge.Falling">
            <summary>
            下降沿
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIDigitalTriggerEdge">
            <summary>
            AI触发沿类型
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIDigitalTriggerEdge.Rising">
            <summary>
            上升沿
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIDigitalTriggerEdge.Falling">
            <summary>
            下降沿
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIAnalogTriggerCondition">
            <summary>
            AI模拟触发条件
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIAnalogTriggerCondition.RisingEdge">
            <summary>
            上升沿
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIAnalogTriggerCondition.FallingEdge">
            <summary>
            下降沿
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIMode">
            <summary>
            AI工作模式枚举类型
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIMode.Finite">
            <summary>
            有限点方式
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIMode.Continuous">
            <summary>
            连续方式
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIMode.Record">
            <summary>
            连续流盘模式
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIClockSource">
            <summary>
            时钟源类型
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIClockSource.Internal">
            <summary>
            内部时钟源
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIClockSource.ExternalSampling">
            <summary>
            外部时钟源（20MHz—80MHz）作为采样时钟基准时钟
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIClockSource.PXIStarSampling">
            <summary>
            PXI Star作为采样时钟基准时钟
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIClockSource.PXICLK10MHzRef">
            <summary>
            PXI CLK 10MHz 作为参考时钟
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIClockSource.PXICLK10MHzSampling">
            <summary>
            PXI CLK 10MHz 作为采样时钟基准时钟
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIClockSource.DaughterBoardSampling">
             <summary>
            Timebase signal originates with an embedded daughterboard
             </summary>
        </member>
        <member name="T:JYPCI69816H.AITriggerMode">
            <summary>
            AI触发模式
            </summary>
        </member>
        <member name="F:JYPCI69816H.AITriggerMode.Start">
            <summary>
            Start触发
            </summary>
        </member>
        <member name="F:JYPCI69816H.AITriggerMode.Reference">
            <summary>
            参考触发
            </summary>
        </member>
        <member name="T:JYPCI69816H.AITrigger">
            <summary>
            AI触发参数配置类
            </summary>
        </member>
        <member name="P:JYPCI69816H.AITrigger.Type">
            <summary>
            //触发类型，包括：Immediate/Software/Digital/Analog
            </summary>
        </member>
        <member name="P:JYPCI69816H.AITrigger.Mode">
            <summary>
            AI触发模式配置
            </summary>
        </member>
        <member name="P:JYPCI69816H.AITrigger.Digital">
            <summary>
            数字触发设置
            </summary>
        </member>
        <member name="P:JYPCI69816H.AITrigger.Analog">
            <summary>
            模拟触发设置
            </summary>
        </member>
        <member name="P:JYPCI69816H.AITrigger.ReTriggerCount">
            <summary>
            重复触发设置,为0时不重复触发，>0时为重复触发次数；
            </summary>
        </member>
        <member name="P:JYPCI69816H.AITrigger.PreTriggerSamples">
            <summary>
            预触发点数，应当大于等于0，等于0时没有预触发
            </summary>
        </member>
        <member name="P:JYPCI69816H.AITrigger.Delay">
            <summary>
            触发延迟时间设置，为0时不延迟，>0时为延迟us数；
            </summary>
        </member>
        <member name="M:JYPCI69816H.AITrigger.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIRecord">
            <summary>
            流盘相关的参数定义
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIRecord.FilePath">
            <summary>
            流盘文件的路径，绝对路径，包含文件名
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIRecord.FileFormat">
            <summary>
            流盘文件格式
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIRecord.Mode">
            <summary>
            流盘模式
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIRecord.Length">
            <summary>
            流盘时间长度，单位为秒，当Mode为Finite时有效
            </summary>
        </member>
        <member name="M:JYPCI69816H.AIRecord.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:JYPCI69816H.FileFormat">
            <summary>
            流盘文件格式枚举定义
            </summary>
        </member>
        <member name="F:JYPCI69816H.FileFormat.Bin">
            <summary>
            二进制文件格式
            </summary>
        </member>
        <member name="T:JYPCI69816H.RecordMode">
            <summary>
            流盘模式枚举定义
            </summary>
        </member>
        <member name="F:JYPCI69816H.RecordMode.Finite">
            <summary>
            有限长度流盘
            </summary>
        </member>
        <member name="F:JYPCI69816H.RecordMode.Infinite">
            <summary>
            无限长度流盘
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIDigitalTrigger">
            <summary>
            AI数字触发设置参数定义
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIDigitalTrigger.Source">
            <summary>
            触发源选择
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIDigitalTrigger.Edge">
            <summary>
            数字触发边沿类型，Rising/Falling
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIDigitalTriggerSource">
            <summary>
            数字触发源定义
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIDigitalTriggerSource.TRG">
            <summary>
            外部输入数字触发信号
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIDigitalTriggerSource.SSI">
            <summary>
            Trigger event signal is from an SSI Source
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIAnalogTriggerSource">
            <summary>
            AI模拟触发源定义
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIAnalogTriggerSource.CH0">
            <summary>
            通道0模拟触发
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIAnalogTriggerSource.CH1">
            <summary>
            通道1模拟触发
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIAnalogTriggerSource.CH2">
            <summary>
            通道2模拟触发
            </summary>
        </member>
        <member name="F:JYPCI69816H.AIAnalogTriggerSource.CH3">
            <summary>
            通道3模拟触发
            </summary>
        </member>
        <member name="T:JYPCI69816H.AIAnalogTrigger">
            <summary>
            AI模拟触发设置参数定义
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIAnalogTrigger.Source">
            <summary>
            触发源
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIAnalogTrigger.Condition">
            <summary>
            模拟触发条件，RisingEdge/FallingEdge
            </summary>
        </member>
        <member name="P:JYPCI69816H.AIAnalogTrigger.Level">
            <summary>
            触发门限
            </summary>
        </member>
    </members>
</doc>
